<!--
  #%L
  Wildfly Camel :: Example :: Camel Transacted JMS
  %%
  Copyright (C) 2013 - 2017 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee.xsd
                           http://camel.apache.org/schema/spring
                           http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jee:jndi-lookup id="connectionFactory" jndi-name="java:/JmsXA"/>
    <jee:jndi-lookup id="transactionManager" jndi-name="java:/TransactionManager"/>

    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="camel"/>
    </bean>

    <bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="transactionManager" ref="jtaTransactionManager" />
    </bean>

    <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="jtaTransactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
    </bean>

    <bean id="jmsConfiguration" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="transactionManager" ref="jtaTransactionManager"/>
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="transacted" value="true"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="configuration" ref="jmsConfiguration"/>
    </bean>

    <!-- Bean to choose a random order XML file -->
    <bean id="orderGenerator" class="org.wildfly.camel.examples.jms.transacted.OrderGenerator" />

    <camelContext xmlns="http://camel.apache.org/schema/spring" id="jms-tx-spring-camel-context">

        <!--
            Configure a simple dead letter strategy. Whenever an IllegalStateException
            is encountered this takes care of rolling back the JMS and JPA transactions.
        -->
        <onException id="onISE">
            <exception>java.lang.IllegalStateException</exception>
            <redeliveryPolicy maximumRedeliveries="1" />
            <handled>
                <constant>true</constant>
            </handled>
            <rollback markRollbackOnly="true" />
        </onException>

        <!--
            This route generates a random order every 15 seconds
        -->
        <route id="timerToFileRoute">
            <from id="routeTimer" uri="timer:order?period=15000&amp;delay=0"/>
            <bean id="orderGenerator" method="generateOrder" ref="orderGenerator"/>
            <setHeader name="Exchange.FILE_NAME" id="route-header-file-name">
                <method method="generateFileName" ref="orderGenerator"/>
            </setHeader>
            <to id="fileProducer" uri="file://{{jboss.server.data.dir}}/orders"/>
        </route>

        <!--
            This route consumes XML files from JBOSS_HOME/standalone/data/orders and sends
            the file content to JMS destination OrdersQueue.
        -->
        <route id="fileToJmsQueueRoute">
            <from id="fileConsumer" uri="file:{{jboss.server.data.dir}}/orders" />
            <transacted id="transacted" />
            <convertBodyTo id="convertToString" type="java.lang.String" />
            <to id="jmsProducer" uri="jms:queue:OrdersQueue" />
        </route>

        <!--
             This route consumes messages from JMS destination OrdersQueue, unmarshalls the XML
             message body using JAXB to an Order entity object. The order is then sent to the JPA
             endpoint for persisting within an in-memory database.

             Whenever an order quantity greater than 10 is encountered, the route throws an IllegalStateException
             which forces the JMS / JPA transaction to be rolled back and the message to be delivered to the dead letter
             queue.
        -->
        <route id="jmsQueueToFileRoute">
            <from id="jmsConsumer" uri="jms:queue:OrdersQueue" />
            <unmarshal id="jaxbUnmarshal">
                <jaxb contextPath="org.wildfly.camel.examples.jms.transacted.model" />
            </unmarshal>
            <to id="jpaProducer" uri="jpa:Order" />
            <choice id="choiceQuantity">
                <when id="whenQuantity">
                    <simple>${body.quantity} > 10</simple>
                    <log id="logError" message="Order quantity is greater than 10 - rolling back transaction!" />
                    <throwException id="exception" exceptionType="java.lang.IllegalStateException" message="Invalid quantity" />
                </when>
                <otherwise id="otherwiseQuantity">
                    <log id="logSuccess" message="Order processed successfully" />
                </otherwise>
            </choice>
        </route>
    </camelContext>
</beans>
